{"version":3,"sources":["containers/Navbar/index.js","components/Instructions/index.js","components/Card/index.js","App.js","index.js"],"names":["Nav","props","Navbar","bg","variant","fixed","Brand","Collapse","className","Text","feedback","score","highScore","Instructions","Jumbotron","fluid","Container","Card","Image","alt","name","src","image","onClick","handleClick","id","thumbnail","App","state","picks","cards","pointCheck","includes","setState","cardDeck","this","sort","Math","random","map","card","Col","xs","key","Row","noGutters","renderBoard","Component","ReactDOM","render","document","getElementById"],"mappings":"4tEAkBeA,MAdf,SAAaC,GACX,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,MAAM,OACrC,kBAACH,EAAA,EAAOI,MAAR,oBACA,kBAACJ,EAAA,EAAOK,SAAR,CAAiBC,UAAU,uBACzB,kBAACN,EAAA,EAAOO,KAAR,CAAaD,UAAU,cAAa,4BAAKP,EAAMS,YAEjD,kBAACR,EAAA,EAAOK,SAAR,CAAiBC,UAAU,uBACzB,kBAACN,EAAA,EAAOO,KAAR,eAAqBR,EAAMU,MAA3B,kBAAiDV,EAAMW,c,QCKhDC,MAbf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAWR,UAAU,eACnB,4CACA,+M,gBCQOS,MAZf,SAAchB,GACZ,OACI,kBAACiB,EAAA,EAAD,CACEC,IAAKlB,EAAMmB,KACXC,IAAKpB,EAAMqB,MACXC,QAAU,kBAAMtB,EAAMuB,YAAYvB,EAAMwB,KACxCC,WAAS,EACTlB,UAAU,c,QC2EHmB,E,2MA1EbC,MAAQ,CACNjB,MAAO,EACPC,UAAW,EACXiB,MAAO,GACPnB,SAAU,yBACVoB,S,EAGFC,WAAa,SAAAN,GAEP,EAAKG,MAAMC,MAAMG,SAASP,IACxB,EAAKG,MAAMhB,UAAY,EAAKgB,MAAMjB,OACpC,EAAKsB,SAAS,CACZrB,UAAW,EAAKgB,MAAMjB,QAG1B,EAAKsB,SAAS,CACZtB,MAAO,EACPD,SAAU,0BACVmB,MAAO,MAGT,EAAKI,SAAS,CACZtB,MAAO,EAAKiB,MAAMjB,MAAQ,EAC1BD,SAAU,wBACVmB,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBJ,O,6EAKpB,IAAD,OACNS,EAAQ,YAAOC,KAAKP,MAAME,OAKhC,OAFAI,EAASE,MAAK,kBAAMC,KAAKC,SAAW,MAGhCJ,EAASK,KAAI,SAAAC,GACX,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,IAAKH,EAAKf,IACpB,kBAAC,EAAD,CACEA,GAAIe,EAAKf,GACTL,KAAMoB,EAAKpB,KACXE,MAAOkB,EAAKlB,MACZE,YAAa,EAAKO,mB,+BAS9B,OACE,6BACE,kBAAC,EAAD,CACEpB,MAAOwB,KAAKP,MAAMjB,MAClBC,UAAWuB,KAAKP,MAAMhB,UACtBF,SAAUyB,KAAKP,MAAMlB,WACvB,kBAAC,EAAD,MACA,kBAACM,EAAA,EAAD,KACE,kBAAC4B,EAAA,EAAD,CAAKpC,UAAU,6BACb,kBAACiC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACE,EAAA,EAAD,CAAKC,WAAW,GACbV,KAAKW,uB,GAjEJC,aCRlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1d3c85a2.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\n\n\nfunction Nav(props) {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n      <Navbar.Brand>Clicky Game</Navbar.Brand>\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Navbar.Text className=\"text-light\"><h4>{props.feedback}</h4></Navbar.Text>\n      </Navbar.Collapse>\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Navbar.Text>Score: {props.score} | High Score: {props.highScore}</Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default Nav;","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\n\nfunction Instructions() {\n  return (\n    <Jumbotron fluid>\n      <Container className='text-center'>\n        <h1>Instructions</h1>\n        <p>\n          Try to see how many characters you can click on with out clicking on the same one twice! Every time you click on a character, the order of the images will jumble! Good luck!\n        </p>\n      </Container>\n    </Jumbotron>\n  )\n}\n\nexport default Instructions;","import React from 'react';\nimport './style.css';\n\nimport Image from 'react-bootstrap/Image';\n\nfunction Card(props) {\n  return(\n      <Image \n        alt={props.name} \n        src={props.image} \n        onClick={ () => props.handleClick(props.id)}\n        thumbnail \n        className='gameCard'\n      />\n  )\n}\n\nexport default Card;","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport Nav from './containers/Navbar';\nimport Instructions from './components/Instructions';\nimport Card from './components/Card';\n\nimport cards from './cards.json';\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    picks: [],\n    feedback: 'Click An Image To Play',\n    cards\n  }\n  \n  pointCheck = id => {\n    \n    if (this.state.picks.includes(id)) {\n      if (this.state.highScore < this.state.score) {\n        this.setState({ \n          highScore: this.state.score\n        })\n      }\n      this.setState({\n        score: 0,\n        feedback: 'You Guessed Incorrectly',\n        picks: []\n      })\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        feedback: 'You Guessed Correctly',\n        picks: [...this.state.picks, id]\n      })\n    }\n  }\n\n  renderBoard() {\n    const cardDeck = [...this.state.cards];\n\n    // this is a lazy method of \"shuffling\":\n    cardDeck.sort(() => Math.random() - 0.5);\n\n    return (\n        cardDeck.map(card => {\n          return (\n            <Col xs={3} key={card.id}>\n              <Card\n                id={card.id}\n                name={card.name}\n                image={card.image}\n                handleClick={this.pointCheck}\n              />\n            </Col>\n          )\n        })\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          highScore={this.state.highScore}\n          feedback={this.state.feedback} />\n        <Instructions />\n        <Container>\n          <Row className=\"justify-content-sm-center\">\n            <Col xs={10}>\n              <Row noGutters={true}>\n                {this.renderBoard()}\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}